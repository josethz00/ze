{
    tokens=[
        letters='regexp:[a-zA-Z]{1}'
        digits='regexp:[0-9]{1}'
        space='regexp:\s+'
        identifier='regexp:[a-zA-Z][a-zA-Z0-9_]*'
        tab='regexp:\t'
        new-line='regexp:\n'
        string-constant='regexp:[a-zA-Z]+'
        number-constant='regexp:^(?=.)([+-]?([0-9]*)(\.([0-9]+))?)$' // regex to match floats and integers
        boolean-constant='regexp:true|false'
        void='void'
        number='number'
        boolean='boolean'
        string='string'
        struct='struct'
        cnumber='cnumber'
        cboolean='cboolean'
        cstring='cstring'
    ]
}

type ::= primitive-type-specifier
            | constant-type-specifier

primitive-type-specifier ::= void
                    | number
                    | boolean
                    | string
                    | struct

constant-type-specifier ::= cnumber
                    | cboolean
                    | cstring

arithmetic-symbols ::= '+'
                    | '-'
                    | '*'
                    | '/'
                    | '%'
                    | '**'

assignment-symbols ::= '='
                    | '+='
                    | '-='
                    | '*='
                    | '/='
                    | '%='
                    | '**='

evaluation-symbols ::= '=='
                    | '!='
                    | '>'
                    | '<'
                    | '>='
                    | '<='
                    | '!'
                    | 'is' // check if two variables are the same, including memory location, declaration, scope etc. 
                    | 'isnt' // the same as 'is' but with negation

constant ::= number-constant
                | string-constant
                | boolean-constant

variable-declaration ::= type identifier

statement ::= expression-statement
                | selection-statement
                | iteration-statement
                | jump-statement

expression-statement ::= {expression}?

expression ::= arithmetic-expression
                | expression

arithmetic-expression ::= arithmetic-expression '+' term
                            | arithmetic-expression '-' term
                            | term

term ::= term '*' factor
            | term '/' factor
            | term '%' factor
            | term '**' factor
            | factor

factor ::= identifier
            | number-constant

selection-statement ::= if '(' expression ')' statement
                        | if '(' expression ')' statement else statement

iteration-statement ::= for '(' {expression}? ';' {expression}? ';' {expression}? ')' statement

jump-statement ::= continue
                    | break
                    | return {expression}?