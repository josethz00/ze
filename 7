#include "./parser.h"

Token advanceParser(struct Parser * parser) {
  parser->tokenIndex += 1;
  if (parser->tokenIndex < parser->list.used) {
    parser->currentToken = parser->list.list[parser->tokenIndex];
  }
  return parser->currentToken;
}

void createParser(struct Parser * parser, TokensList tokens) {
  initTokensList(&parser->list);
  parser->list = tokens;
  parser->tokenIndex = -1;
  *parser->currentToken = (Token*)malloc(1 * sizeof(Token));
  advanceParser(parser);
}

AST factorParser(struct Parser * parser) {
  AST astFactor = createAST(AST_NULL);
  if (
    !strcmp(parser->currentToken.type, TT_INT) || 
    !strcmp(parser->currentToken.type, TT_FLOAT)
  ) {
    printf("\n value -> %s \n", parser->currentToken.value);
    astFactor.type = !strcmp(parser->currentToken.type, TT_INT) ? AST_INT : AST_FLOAT;
    astFactor.numericValue = parser->currentToken.value;
    advanceParser(parser);
  }
  return astFactor;
}

AST termParser(struct Parser * parser) {
  AST left = createAST(AST_NULL);
  left = factorParser(parser);

  printf("\n %s cuuuuuuuuuuuu \n", parser->currentToken.value);

  while(
    !strcmp(parser->currentToken.type, TT_MUL) ||
    !strcmp(parser->currentToken.type, TT_DIV)
  ) {
    AST right = createAST(AST_NULL); 
    right = factorParser(parser);
    printf("\n value -> %s \n", right.numericValue);
    left.left = &left;
    left.operatorValue = parser->currentToken.value;
    left.right = &right;
    advanceParser(parser);
  }
  return left;
}

AST exprParser(struct Parser * parser) {
  AST left = createAST(AST_NULL); 
  left = termParser(parser);

  while(
    !strcmp(parser->currentToken.type, TT_PLUS) ||
    !strcmp(parser->currentToken.type, TT_MINUS)
  ) {
    AST right = createAST(AST_NULL); 
    right = termParser(parser);
    left.left = &left;
    left.operatorValue = parser->currentToken.value;
    left.right = &right;
    advanceParser(parser);
  }

  return left;
}

AST runParser(struct Parser * parser) {
  return exprParser(parser);
}
